---

# SODAR Core app installation ---------------------------------------------------------------------

- name: install virtualenv
  command: /usr/local/bin/pip{{ sodar_core_app_python_version }} install virtualenv
  args:
    creates: /usr/bin/virtualenv
  changed_when: false  # hack, might go to /usr/local/bin if Python is there...

- name: install dependency for ldap python package
  apt:
    name:
      - libsasl2-dev
    state: present
  when: ansible_os_family == "Debian"

- name: install misc dependencies
  package:
    name:
      - make
      - gcc
      - "{{ sodar_core_app_lib_openldap_clients }}"
      - "{{ sodar_core_app_lib_openldap_devel }}"
    state: present

- name: ensure clone target exists
  file:
    state: directory
    dest: "{{ item }}"
    owner: "{{ sodar_core_app_name }}"
    group: "{{ sodar_core_app_name }}"
    mode: u=rwx,go=rx
  loop:
    - /srv
    - /srv/{{ sodar_core_app_name }}-web/
    - /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}

- name: clone sodar-core-app source code
  git:
    repo: "{{ sodar_core_app_git_repo }}"
    dest: /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}
    version: "{{ sodar_core_app_version }}"
    accept_hostkey: true
  notify:
    - restart sodar-core-app-web
    - restart sodar-core-app-celeryd
    - restart sodar-core-app-celerybeat
  register: clone_repo

# Setup Vue.js apps -------------------------------------------------------------------------------

- name: install vue.js app packages
  shell: |
    cd /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}/{{ item }}
    npm ci  # "ci" installs from package-lock.json without modifying the repo
  loop: "{{ sodar_core_vuejs_apps }}"
  # when: clone_repo.changed
  changed_when: false  # hack, must always do

- name: delete previous vue.js apps builds
  file:
    state: absent
    path: "/srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}/{{ item }}/dist/"
  loop: "{{ sodar_core_vuejs_apps }}"
  # when: clone_repo.changed
  changed_when: false  # hack, must always do

- name: build production version of vue.js apps
  shell: |
    cd /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}/{{ item }}
    npm run build
  loop: "{{ sodar_core_vuejs_apps }}"
  register: build_vue_app
  # when: clone_repo.changed
  changed_when: false  # hack, must always do


# Setup virtual environment -----------------------------------------------------------------------

- name: ensure virtual env target exists
  file:
    recurse: true
    state: directory
    dest: "/srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv"
    owner: "{{ sodar_core_app_name }}"
    group: "{{ sodar_core_app_name }}"
  notify:
    - restart sodar-core-app-web
    - restart sodar-core-app-celeryd
    - restart sodar-core-app-celerybeat
  changed_when: false  # hack

- name: create virtualenv environment
  environment:
    DATABASE_URL: "postgresql://{{ postgres_client_user }}:{{ postgres_client_password }}@{{ postgres_client_host }}/{{ postgres_client_db }}"
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_SECRET_KEY: "{{ sodar_core_app_django_secret_key }}"
    DJANGO_SETTINGS_MODULE: "config.settings.production"
    LC_ALL: en_US.UTF-8
  shell: |
    set -xeo pipefail
    trap "rm -rf /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv" ERR
    $(which virtualenv) -p /usr/bin/python{{ sodar_core_app_python_version }} /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv
  args:
    executable: /bin/bash
    creates: /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv/bin/activate
  register: venv_created
  notify:
    - restart sodar-core-app-web
    - restart sodar-core-app-celeryd
    - restart sodar-core-app-celerybeat

- name: install site requirements in virtualenv
  environment:
    DATABASE_URL: "postgresql://{{ postgres_client_user }}:{{ postgres_client_password }}@{{ postgres_client_host }}/{{ postgres_client_db }}"
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_SECRET_KEY: "{{ sodar_core_app_django_secret_key }}"
    DJANGO_SETTINGS_MODULE: "config.settings.production"
    LC_ALL: en_US.UTF-8
  shell: |
    set -xeo pipefail
    trap "rm -rf /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv" ERR
    source /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv/bin/activate
    pip install -r requirements/production.txt
  args:
    executable: /bin/bash
    chdir: /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}
  when: venv_created.changed or clone_repo.changed
  notify:
    - restart sodar-core-app-web
    - restart sodar-core-app-celeryd
    - restart sodar-core-app-celerybeat
  tags: [skip_ansible_lint]  # TODO: move to handler?

# Prepare site and superuser ----------------------------------------------------------------------

- name: delete previous version of samplesheets vue.js app build
  file:
    state: absent
    path: "/srv/{{ sodar_core_app_name }}/{{ sodar_core_app_version }}/staticfiles/{{ item }}-vue/"
  loop: "{{ sodar_core_vuejs_apps }}"
  # when: build_vue_app.changed
  changed_when: false  # hack, must always do

- name: django -- prepare static files
  environment:
    DATABASE_URL: "postgresql://{{ postgres_client_user }}:{{ postgres_client_password }}@{{ postgres_client_host }}/{{ postgres_client_db }}"
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_SECRET_KEY: "{{ sodar_core_app_django_secret_key }}"
    DJANGO_SETTINGS_MODULE: "config.settings.production"
    LC_ALL: en_US.UTF-8
  shell: |
    set -xeo pipefail
    source /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv/bin/activate
    python manage.py collectstatic --no-input
  args:
    executable: /bin/bash
    chdir: /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}
  changed_when: false  # hack, must always prepare

# We will always migrate...
- name: django -- migrate database
  environment:
    DATABASE_URL: "postgresql://{{ postgres_client_user }}:{{ postgres_client_password }}@{{ postgres_client_host }}/{{ postgres_client_db }}"
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_SECRET_KEY: "{{ sodar_core_app_django_secret_key }}"
    DJANGO_SETTINGS_MODULE: "config.settings.production"
    LC_ALL: en_US.UTF-8
  shell: |
    source /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv/bin/activate
    python manage.py migrate
  args:
    executable: /bin/bash
    chdir: /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}
  changed_when: false  # hack

# .. but only create the super user unless previously created.
- name: django - create superuser
  environment:
    DATABASE_URL: "postgresql://{{ postgres_client_user }}:{{ postgres_client_password }}@{{ postgres_client_host }}/{{ postgres_client_db }}"
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_SECRET_KEY: "{{ sodar_core_app_django_secret_key }}"
    DJANGO_SETTINGS_MODULE: "config.settings.production"
    LC_ALL: en_US.UTF-8
  shell: |
    set -xeo pipefail
    source /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv/bin/activate
    echo "from django.contrib.auth import get_user_model; User = get_user_model(); \
      User.objects.create_superuser('{{ sodar_core_app_superuser }}', \
      '{{ sodar_core_app_superuser_email }}', '{{ sodar_core_app_superuser_password }}')" \
    | python manage.py shell
    touch /srv/{{ sodar_core_app_name }}-web/.superuser-created
  args:
    executable: /bin/bash
    chdir: /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}
    creates: /srv/{{ sodar_core_app_name }}-web/.superuser-created
  no_log: "{{ sodar_core_app_enable_no_log }}"

# Build docs --------------------------------------------------------------------------------------

- name: build site manual with Sphinx
  environment:
    LC_ALL: en_US.UTF-8
  shell: |
    source /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}-venv/bin/activate
    make clean html
  args:
    executable: /bin/bash
    chdir: /srv/{{ sodar_core_app_name }}-web/{{ sodar_core_app_version }}/docs_manual
  when: sodar_core_app_build_docs # and clone_repo.changed
  changed_when: false  # hack, must always build
  tags: [skip_ansible_lint]  # TODO: move to handler?
